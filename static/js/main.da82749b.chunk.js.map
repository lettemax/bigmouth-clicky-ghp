{"version":3,"sources":["components/Card/Card.js","components/Header/Header.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","image","alt","onClick","handleClick","name","id","Header","Component","Nav","href","this","status","score","topScore","Wrapper","state","characters","charactersList","clicked","e","preventDefault","console","log","target","arr","_this","includes","setState","push","newScore","i","length","j","Math","floor","random","_ref","_this2","components_Nav_Nav","key","components_Header_Header","map","character","components_Card_Card","App","components_Wrapper_Wrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da82749b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n    <div className=\"col-md-3\">\n        <div className=\"card mb-5\">\n            <img className=\"card-img-top\" src={props.image} \n                alt=\"BM char\" onClick={props.handleClick} \n                name={props.name} id={props.id}\n            />\n        </div>\n    </div>\n)\n\nexport default Card;\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n    render () { \n        return (\n            <header className=\"header\">\n                <h2>\n                    Big Mouth-themed clicky game!\n                </h2>\n                <h3>\n                    Click on an image to earn points, but don't click on any more than once!\n                </h3>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from \"react\";\n\nclass Nav extends Component {\n    render () { \n        return (\n            <nav className=\"navbar navbar-light yellow\">\n                <a className=\"navbar-brand\" href=\"/\">Big Mouth Clicky Game</a>\n                <span className=\"nav-item\">{this.props.status}</span>\n                <span className=\"navbar-text\">Score: {this.props.score} | Top score: {this.props.topScore}</span>\n            </nav>\n        )\n    }\n}\n\nexport default Nav;","import React, { Component } from \"react\";\nimport \"./Wrapper.css\";\nimport charactersList from \"../../characters.json\"\nimport Card from \"../Card\"\nimport Header from \"../Header\"\nimport Nav from \"../Nav\"\n\nclass Wrapper extends Component {\n    // Setting the component's initial state\n    state = {\n      score: 0,\n      topScore: 0,\n      characters: charactersList,\n      clicked: [],\n      status: \"\"\n    };\n\n    // shuffle = () => {\n        \n    // }\n\n    // when the user clicks on a character card\n    handleClick = (e) => {\n        \n        e.preventDefault();\n\n        console.log(e.target);\n\n        // grab the selected card's id\n        let name = e.target.name;\n        //\n        console.log(\"clicked \" + name)\n        // declare array to hold changes of state\n        let arr = this.state.clicked;\n\n        if (!this.state.clicked.includes(name)) {\n\n            // Push to arr\n            arr.push(name);\n\n            // Log \n            console.log(\"pushed \" + name)\n\n            let newScore = this.state.score;\n            newScore+=1;\n\n            // Set state\n            this.setState({status: \"Nice click\"})\n            this.setState({clicked: arr})\n            this.setState({score: newScore})\n\n            if (newScore == 12) {\n                this.setState({status: \"You won!!! New game started\"})\n                this.setState({score: 0})\n                this.setState({clicked: []})\n            }\n            \n            if (newScore > this.state.topScore) {\n                this.setState({topScore: newScore})\n            }\n\n        } else {\n\n            //\n           console.log(\"already clicked: \" + name)\n\n           //\n           this.setState({clicked: []})\n\n           this.setState({status: \"You already clicked \" + name + \". New game started\"})\n\n           this.setState({score: 0})\n        }\n        /**\n         * Shuffles array in place. ES6 version\n         * param {Array} a items An array containing the items.\n         */\n        let a = this.state.characters;\n\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n                [a[i], a[j]] = [a[j], a[i]];\n        }\n\n        // Assign our new random characters array to the state characters array\n        this.setState({characters: a});\n\n    }\n  \n    render() {\n      // Notice how each input has a `value`, `name`, and `onChange` prop\n      return (\n        <div>\n         <Nav \n\n            key = {1}\n            score = {this.state.score}\n            topScore = {this.state.topScore}\n            status = {this.state.status}\n\n         />\n         <Header />\n          <div className=\"container\" id=\"card-container\">\n            <div className=\"row\">\n                {\n                    this.state.characters.map(\n                        character => <Card \n\n                            key          ={character.id}\n                            id           ={character.id}\n                            name         ={character.name}\n                            image        ={character.image}\n                            handleClick  ={this.handleClick}\n\n                        />\n                    ) \n                }\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  export default Wrapper;\n  ","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper'\n\nclass App extends Component {\n  render() {\n    return (\n        <Wrapper>\n        </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}